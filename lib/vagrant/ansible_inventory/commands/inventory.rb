require 'optparse'

module VagrantPlugins
  module AnsibleInventory
    module Commands
      class Inventory < Vagrant.plugin(2, :command)

        def execute
          print build
        end

        private

        def build
          inv = {}

          # Detect meta, explicit and implicit groups
          meta = groups.select{|group| group.include?(':children') }
          exp  = groups.reject{|group| meta.include?(group) }
          imp  = (nodes.keys - exp.values.flatten)

          # Assign grouped nodes to inventory
          imp.each{|gname| inv[gname] = nodes[gname].merge id: gname }
          exp.each{|gname, gnodes| inv[gname] = gnodes.map{|n| nodes[n].merge id: n }}
          meta.each{|gname, gnames| inv[gname] = gnames }

          inv
        end

        def config
          @config ||= with_target_vms{}.first.config
        end

        def detect_ip_address(machine)
          if machine.guest.name == :coreos
            detect_coreos_ip_address(machine)
          else
            machine.provider.driver.read_guest_ip(1)
          end
        end

        def detect_coreos_ip_address(machine)
          private_ipv4 = nil

          machine.communicate.tap do |comm|
            comm.sudo('ifconfig eth1') do |_,result|
              private_ipv4 = result.scan(%r{inet \d+\.\d+\.\d+.\d+ }).first.split(' ').last
            end
          end

          private_ipv4
        end

        def groups
          @groups ||= config.ansible.groups
        end

        def nodes
          @nodes ||= with_target_vms{}.each_with_object({}) do |machine, hash|
            raise Vagrant::Errors::SSHNotReady unless machine.ssh_info
            hash[machine.name.to_s] = {
              ssh_user:             'vagrant',
              ssh_host:             detect_ip_address(machine),
              ssh_port:             22,
              ssh_private_key_file: machine.ssh_info[:private_key_path].first
            }
          end
        end

        def node_attrs(id, node)
          "#{node.delete(id)} #{node.map{|k| "ansible_#{k[0]}=#{k[1]}"}.join(' ')}"
        end

        def print(inventory)
          out = "# Generated by vagrant-ansible_inventory plugin\n\n"

          inventory.each do |entries|
            group_name, children = *entries
            out <<  "[#{group_name}]\n"

            if children.kind_of? Hash
              out << "#{node_attrs(:id, children)}\n"
            else
              children.each do |child|
                out << "#{(child.kind_of?(Hash) ? node_attrs(:id, child) : child)}\n"
              end
            end

            out << "\n"
          end

          puts out
        end

      end
    end
  end
end
